Project Overview: Building a Discord RAG Bot
Welcome to your first AI project! 
This assignment challenges you to build a Discord Retrieval-Augmented Generation (RAG) Bot. This bot will be capable of answering questions based on a specific knowledge base, going beyond what a standard Large Language Model (LLM) might know by "retrieving" relevant information before "generating" a response.
What is a RAG Bot? Imagine you want an AI to answer questions about this AI Internship program's internal documentation, or a training material. A regular LLM might hallucinate or not have the most up-to-date information. A RAG bot solves this by:
Retrieval: When a user asks a question, the bot first searches a dedicated knowledge base (e.g., a collection of documents) to find the most relevant pieces of information.
Augmentation: It then takes these retrieved pieces of information and "augments" the user's original query.
Generation: Finally, it sends this augmented query (original question + retrieved context) to an LLM, which uses the provided context to generate a more accurate and grounded answer.
Why Discord? Discord provides a familiar, real-world platform for deploying and interacting with your bot, allowing for easy testing and user feedback.
Various Role Involvement: Each role (Data Scientist, Frontend Engineer, Backend Engineer) has distinct responsibilities. See the tabs on the left side for role specific assignments. 
Key Concepts to Understand:
Chunking: Breaking down large documents into smaller, manageable pieces (chunks).
Embeddings: Converting text chunks into numerical vectors, representing their semantic meaning.
Vector Database: A specialized database optimized for storing and searching these vector embeddings (e.g., MongoDB Atlas Vector Search).
Vector Search: Finding the most similar vectors (and thus, text chunks) to a given query vector.
LLMs: Large Language Models, the "brain" that generates human-like text.
API Design: How different parts of your application communicate with each other.
Deployment: Getting your application running in a live environment.
Logging & Observability: Monitoring your application's health and performance.
User Experience (UX) in AI: Designing intuitive and effective ways for users to interact with AI.


Note: To assist with the development process, you are free to use any AI coding, feel free to to use Azure AI Foundry and the free DeepSeek model. 
YT Deploy DeepSeek R1 using Azure AI Foundry and Build a Web Chatbot | No Charges for API Use = https://www.youtube.com/watch?v=pj2knBX4S1w 
MSFT = https://azure.microsoft.com/en-us/pricing/purchase-options/azure-account [Available only to new Azure customers = $200 credit]
MSFT Billing for Free Trial Account = https://learn.microsoft.com/en-us/answers/questions/2283380/billing-for-free-trial-account 
MSFT - DeepSeek R1 is now available on Azure AI Foundry and GitHub = https://azure.microsoft.com/en-us/blog/deepseek-r1-is-now-available-on-azure-ai-foundry-and-github/
Go through all of the links above so you have a good idea

Good luck, and remember to have fun learning! 
Helpful Resources: 
Here are some helpful resources that could be used in your Discord Chatbot journey.


Youtube:  Code a Discord Bot with JavaScript 
Youtube: Code a Discord Bot with Python
Youtube: Learn Discord.js V14 
Workshop created by Mentor Apporva that walks through the end-to-end process of chunking, embedding, ingestion, implementing vector search, RAG, and adding memory from scratch, mostly without any frameworks, except LangChain for chunking
Youtube: Deploying a discord bot using docker
Build a RAG System Using Claude 3 Opus And MongoDB

Source Documents the Discord Chatbot should Reference: 
AI Bootcamp Journey & Learning Path - Also shows high-level schedule
Training For AI Engineer Interns  - Many video links in this document
Intern FAQ - AI Bootcamp = Frequently asked questions

Office Hours (for weeks 1-3):
Please look for announcements in Discord for exact dates/times of Office Hours. 
Use Office Hours to help with roadblocks rather than as a gatekeeper holding you back. This way you start coding and make progress while not waiting for scheduled weekly Office hour sessions.
